<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="1">

        <record id="b2b_item_in_1" model="b2b.item.in">
            <field name="sequence">1</field>
            <field name="active">False</field>
            <field name="name">sale_order</field>
            <field name="model">sale.order</field>
            <field name="description">Presupuesto de venta</field>
            <field name="code">def get_action(action, data):
    if action == 'create': action = 'create_web'
    return action
    
def prepare_address_fields(self, address):
    # Buscar provincia por CP y país
    res_zip = self.env['res.better.zip'].search([('name', 'ilike', address.get('zip')), ('display_name', 'ilike', address.get('country_id'))], limit=1)
    
    if not res_zip:
        # Buscar por nombre y país
        res_zip = self.env['res.better.zip'].search([('city', 'ilike', address.get('state_id')), ('display_name', 'ilike', address.get('country_id'))], limit=1)
    
    # Si no se encontró la relacción
    if not res_zip:
        raise ValueError('ERROR SO01: Country or state not found!')
    
    # Datos extra, ponemos en type 'other' para que no se pase a la web
    address.update({
        'comment': 'DROPSHIPPING-WEB',
        'type': 'delivery',
        'active': False,
        'state_id': res_zip.state_id.id,
        'country_id': res_zip.country_id.id
    })
    return address
    
def prepare_order_fields(self, order):
    One2many_order_lines = list()
    
    # Obtener el cliente
    client = self.env['res.partner'].browse(int(order.get('partner_id')))
    
    # Obtener id de dirección de facturación (si no es empresa la función address_get da error)
    partner_invoice_id = client.address_get(['contact', 'invoice'])['invoice'] if client.is_company else client.id
    
    # Modificamos las líneas
    if type(order.get('order_line')) is list:
        for line in order['order_line']:
            # Es necesario el nombre
            product = self.env['product.product'].browse(int(line['variant_id'])) if line['variant_id'] else self.env['product.template'].browse(int(line['product_id']))
            # Formamos la línea con la sintaxis del One2many
            One2many_order_lines.append(tuple([0, 0, {
                'product_id': product.id if line['variant_id'] else product.product_variant_id.id,
                'product_uom_qty': float(line['quantity'])
            }]))
    
    # Actualizar campos + datos extra
    order.update({
        'company_id': b2b.get('company_id', 1),
        'order_line': One2many_order_lines,
        'partner_id': int(order.get('partner_id', client.id)),
        'partner_invoice_id': partner_invoice_id,
        'partner_shipping_id': int(order.get('partner_shipping_id', client.id)),
        'pricelist_id': client.property_product_pricelist.id,
        'picking_policy': 'direct',
        'state': 'draft',
        'chanel': 'web'
    })

    return order
    
def get_data(self, data):
    
    # Si recibimos la dirección de envío como un diccionario primero tenemos que crearla
    if type(data.get('partner_shipping_id')) is dict:
        parsed_address = b2b['prepare_address_fields'](self, data['partner_shipping_id'])
        shippping_address = self.env['res.partner'].create(parsed_address)
        if shippping_address:
            data.update({
                'partner_shipping_id': shippping_address.id,
                'neutral_document': True
            })
    
    # Devolvemos los datos para crear el pedido
    return b2b['prepare_order_fields'](self, data)
    
def pos_data(self, data):
    if self and 'recalculate_prices' in self:
        self.recalculate_prices()</field>
        </record>
        
    </data>
</odoo>