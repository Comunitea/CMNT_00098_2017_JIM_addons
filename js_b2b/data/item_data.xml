<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="1">
        <record id="b2b_item_1" model="b2b.item">
            <field name="sequence">1</field>
            <field name="active">True</field>
            <field name="name">attribute</field>
            <field name="model">b2b.item</field>
            <field name="description">Atributos de producto</field>
            <field name="code">
                b2b_fields_to_watch = (
                    'name', 
                    'sequence'
                )

                def b2b_is_notifiable(self, vals):
                    return True

                def b2b_get_data(self):
                    return {
                        'name': self.get_field_translations('name'),
                        'type': 'color' if self.is_color else 'select',
                        'sequence': self.sequence
                    }
            </field>
        </record>

        <record id="b2b_item_2" model="b2b.item">
            <field name="sequence">2</field>
            <field name="active">True</field>
            <field name="name">attribute_value</field>
            <field name="model">b2b.item</field>
            <field name="description">Valores de atributos</field>
            <field name="code">
                b2b_fields_to_watch = (
                    'name', 
                    'sequence'
                )

                def b2b_is_notifiable(self, vals):
                    return True

                def b2b_get_data(self):
                    return {
                        'attribute_id': self.attribute_id.id,
                        'name': self.get_field_translations('name'),
                        'sequence': self.sequence
                    }
            </field>
        </record>

        <record id="b2b_item_3" model="b2b.item">
            <field name="sequence">3</field>
            <field name="active">True</field>
            <field name="name">brand</field>
            <field name="model">b2b.item</field>
            <field name="description">Marcas de productos</field>
            <field name="code">
                b2b_fields_to_watch = (
                    'name', 
                    'description', 
                    'logo'
                )

                def b2b_is_notifiable(self, vals):
                    return True

                def b2b_get_data(self):
                    return {
                        'name': self.get_field_translations('name'),
                        'description': self.get_field_translations('description'),
                        'upload:logo': self.logo or None
                    }
            </field>
        </record>

        <record id="b2b_item_4" model="b2b.item">
            <field name="sequence">4</field>
            <field name="active">True</field>
            <field name="name">category</field>
            <field name="model">b2b.item</field>
            <field name="description">Categorías de producto</field>
            <field name="code">
                b2b_fields_to_watch = None

                def b2b_is_notifiable(self, vals):
                    return True

                def b2b_get_data(self):
                    return {
                        'name': self.get_field_translations('name'),
                        'parent_id': self.parent_id.id if self.parent_id else None,
                        'visible': self.web
                    }
            </field>
        </record>

        <record id="b2b_item_5" model="b2b.item">
            <field name="sequence">5</field>
            <field name="active">True</field>
            <field name="name">product</field>
            <field name="model">b2b.item</field>
            <field name="description">Productos</field>
            <field name="code">
                b2b_fields_to_watch = (
                    'name', 
                    'barcode', 
                    'description', 
                    'web_global_stock', 
                    'product_brand_id', 
                    'attribute_line_ids',  
                    'image', 
                    'tag_ids', 
                    'type', 
                    'company_id',
                    'active'
                )

                def b2b_is_notifiable(self, vals):
                    # Es almacenable y tiene etiquetas
                    return self.type == 'product' and self.tag_ids

                def b2b_get_data(self):
                    return {
                        'name': self.get_field_translations('name'),
                        'default_code:reference': self.template_code or self.default_code,
                        'barcode:ean13': self.barcode if self.barcode else None,
                        'tag_ids:category_id': self.tag_ids.ids,
                        'brand_id': self.product_brand_id.id if self.product_brand_id else None,
                        'description': self.get_field_translations('description'),
                        'fixed:stock': self.product_variant_id.web_global_stock if self.product_variant_count == 1 else None,
                        'weight': self.weight,
                        'upload:image': self.image or None
                    }
            </field>
        </record>

        <record id="b2b_item_6" model="b2b.item">
            <field name="sequence">6</field>
            <field name="active">True</field>
            <field name="name">product</field>
            <field name="model">b2b.item</field>
            <field name="description">Productos premium</field>
            <field name="code">
                b2b_fields_to_watch = (
                    'name', 
                    'barcode', 
                    'description', 
                    'web_global_stock', 
                    'product_brand_id', 
                    'attribute_line_ids', 
                    'tag_ids', 
                    'type', 
                    'company_id',
                    'active'
                )

                def b2b_is_notifiable(self, vals):
                    # Es almacenable y tiene etiquetas y tiene el atributo 'premium' y es premium
                    return self.type == 'product' and self.tag_ids and 'premium' in self and self.premium == True

                def b2b_get_data(self):
                    return {
                        'name': self.get_field_translations('name'),
                        'default_code:reference': self.template_code or self.default_code,
                        'barcode:ean13': self.barcode if self.barcode else None,
                        'tag_ids:category_id': self.tag_ids.ids,
                        'brand_id': self.product_brand_id.id if self.product_brand_id else None,
                        'description': self.get_field_translations('description'),
                        'fixed:stock': self.product_variant_id.web_global_stock if self.product_variant_count == 1 else None,
                        'weight': self.weight,
                        'upload:image': self.image or None
                    }
            </field>
        </record>

        <record id="b2b_item_7" model="b2b.item">
            <field name="sequence">7</field>
            <field name="active">True</field>
            <field name="name">product_variant</field>
            <field name="model">b2b.item</field>
            <field name="description">Variantes / Combinaciones</field>
            <field name="code">
                b2b_fields_to_watch = (
                    'default_code',
                    'barcode', 
                    'web_global_stock', 
                    'attribute_line_ids', 
                    'weight',
                    'default',
                    'active'
                )

                def b2b_is_notifiable(self, vals):
                    # La plantilla está activa y es almacenable y tiene etiquetas y tiene atributos (las variantes únicas no tienen atributos)
                    return self.product_tmpl_id.active and self.type == 'product' and self.tag_ids and self.product_attribute_count

                def b2b_get_data(self):
                    return {
                        'fixed:product_id': self.product_tmpl_id.id,
                        'default_code:reference': self.default_code,
                        'attribute_line_ids:attribute_value': self.attribute_value_ids.ids,
                        'barcode:ean13': self.barcode if self.barcode else None,
                        'web_global_stock:stock': self.web_global_stock,
                        'weight': self.weight,
                        'default': False
                    }
            </field>
        </record>

        <record id="b2b_item_8" model="b2b.item">
            <field name="sequence">8</field>
            <field name="active">True</field>
            <field name="name">product_image</field>
            <field name="model">b2b.item</field>
            <field name="description">Imágenes del producto</field>
            <field name="code">
                b2b_fields_to_watch = None

                def b2b_is_notifiable(self, vals):
                    return True

                def b2b_get_data(self):
                    return {
                        'fixed:product_id': self.product_tmpl_id.id, 
                        'name': self.get_field_translations('name'), 
                        'upload:url': self.image or None, 
                        'product_attributes_values:attributes': self.product_attributes_values.ids
                    }
            </field>
        </record>

        <record id="b2b_item_9" model="b2b.item">
            <field name="sequence">9</field>
            <field name="active">True</field>
            <field name="name">currency</field>
            <field name="model">b2b.item</field>
            <field name="description">Monedas</field>
            <field name="code">
                b2b_fields_to_watch = None

                def b2b_is_notifiable(self, vals):
                    return True

                def b2b_get_data(self):
                    return {
                        'lname:name': self.lname or self.name,
                        'code': self.name,
                        'symbol': self.symbol,
                        'rate': self.rate
                    }
            </field>
        </record>

        <record id="b2b_item_10" model="b2b.item">
            <field name="sequence">10</field>
            <field name="active">True</field>
            <field name="name">pricelist</field>
            <field name="model">b2b.item</field>
            <field name="description">Tarifas</field>
            <field name="code">
                b2b_fields_to_watch = None

                def b2b_is_notifiable(self, vals):
                    return True

                def b2b_get_data(self):
                    return {
                        'name': self.get_field_translations('name')
                    }
            </field>
        </record>

        <record id="b2b_item_11" model="b2b.item">
            <field name="sequence">11</field>
            <field name="active">True</field>
            <field name="name">supply_plan</field>
            <field name="model">b2b.item</field>
            <field name="description">Previsión de abastecimiento</field>
            <field name="code">
                b2b_fields_to_watch = (
                    'order_id', 
                    'product_id', 
                    'product_qty', 
                    'qty_received', 
                    'date_expected', 
                    'state'
                )

                def b2b_is_notifiable(self, vals):
                    # El estado es (assigned, done o cancel) y la empresa es JIM SPORTS TECHNOLOGY y es un INT y hace referencia a una línea de compra y la fecha es superior a la actual
                    return self.state in ('assigned', 'done', 'cancel') and self.company_id.id == 1 and self.picking_type_id.code == 'incoming' and self.purchase_line_id and datetime.strptime(self.date_expected, "%Y-%m-%d %H:%M:%S") >= datetime.now()

                def b2b_get_data(self):
                    return {
                        'purchase_line_id:order_id': self.purchase_line_id.order_id.id,
                        'product_id': self.product_id.product_tmpl_id.id if self.product_id else None,
                        'variant_id': self.product_id.id if self.product_id.product_tmpl_id.product_variant_count > 1 else None,
                        'quantity': self.product_uom_qty if self.state == 'assigned' else 0,
                        'shipping_date': self.date_expected
                    }
            </field>
        </record>

        <record id="b2b_item_12" model="b2b.item">
            <field name="sequence">12</field>
            <field name="active">True</field>
            <field name="name">customer</field>
            <field name="model">b2b.item</field>
            <field name="description">Clientes</field>
            <field name="code">
                b2b_fields_to_watch = (
                    'ref',
                    'name', 
                    'vat', 
                    'email', 
                    'web_password', 
                    'property_product_pricelist', 
                    'type', 
                    'parent_id', 
                    'group_companies_ids'
                )

                def b2b_is_notifiable(self, vals):
                    # Es el contacto principal (puede ser el mismo) es empresa y es cliente y tiene correo electrónico y tiene contraseña web y es el contacto principal
                    return self.type == 'contact' and self.commercial_partner_id.is_company and self.commercial_partner_id.customer and self.commercial_partner_id.email and self.commercial_partner_id.web_password and self.commercial_partner_id.id == self.id

                def b2b_get_primary_email(email):
                    # Separadores válidos
                    email_separators = (',', ';')
                    # Si tiene un valor
                    if email:
                        for separator in email_separators:
                            if separator in email:
                                return email.split(separator)[0]
                    return email
                        
                def b2b_get_data(self):
                    return {
                        'name': self.name,
                        'vat': self.vat or None,
                        'email': b2b_get_primary_email(self.email),
                        'ref:reference': self.ref or None,
                        'web_password:password': self.web_password,
                        'property_product_pricelist:pricelist_id': self.property_product_pricelist.id or None,
                        'companies': [company.partner_id.id for company in self.group_companies_ids]
                    }
            </field>
        </record>

        <record id="b2b_item_13" model="b2b.item">
            <field name="sequence">13</field>
            <field name="active">True</field>
            <field name="name">customer_address</field>
            <field name="model">b2b.item</field>
            <field name="description">Direcciones de clientes</field>
            <field name="code">
                b2b_fields_to_watch = (
                    'name', 
                    'type', 
                    'parent_id', 
                    'street', 
                    'street2', 
                    'zip', 
                    'city', 
                    'state_id', 
                    'country_id'
                )

                def b2b_is_notifiable(self, vals):
                    # Comprobamos si el cliente relaccionado es notificable
                    client_item = self.env['b2b.item'].search([('name', '=', 'customer')])
                    notifiable_client = client_item.must_notify(self.commercial_partner_id) if client_item else False
                    # Es de tipo 'delivery'
                    return notifiable_client and self.type == 'delivery'

                def b2b_get_data(self):
                    return {
                        'customer_id': self.parent_id.id, 
                        'ref:reference': self.ref, 
                        'name': self.name, 
                        'street': self.street, 
                        'street2': self.street2 or None, 
                        'zip': self.zip, 
                        'city': self.city, 
                        'state_id:state': self.state_id.name if self.state_id else None, 
                        'country_id:country': self.country_id.code if self.country_id else 'ES', 
                        'default': self.default_partner_by_type
                    }
            </field>
        </record>

        <record id="b2b_item_14" model="b2b.item">
            <field name="sequence">14</field>
            <field name="active">True</field>
            <field name="name">invoice</field>
            <field name="model">b2b.item</field>
            <field name="description">Factura de venta o abono</field>
            <field name="code">
                b2b_fields_to_watch = (
                    'commercial_partner_id', 
                    'number', 
                    'date_invoice', 
                    'amount_total',
                    'state'
                )

                def b2b_is_notifiable(self, vals):
                    # Comprobamos si el cliente relaccionado es notificable
                    client_item = self.env['b2b.item'].search([('name', '=', 'customer')])
                    notifiable_client = client_item.must_notify(self.commercial_partner_id) if client_item else False
                    # Es de tipo out_invoice o out_refund y tiene asignado un número y el estado es open o cancel
                    return notifiable_client and self.number and self.type in ('out_invoice', 'out_refund') and self.state in ('open', 'cancel')

                def b2b_get_data(self):
                    # Obtenemos el documento PDF como un string
                    docfile = self.env['report'].sudo().get_pdf([self.id], 'account.report_invoice')
                    # Todos los campos son fixed, ya que hasta que se valida no se notifica
                    # de forma que los campos que no se modifican al validar no se enviarían
                    return {
                        'fixed:customer_id': self.commercial_partner_id.id,
                        'fixed:number': self.number, 
                        'fixed:date': self.date_invoice, 
                        'fixed:total': self.amount_total, 
                        'fixed:pdf': base64.b64encode(docfile)
                    }
            </field>
        </record>

        <record id="b2b_item_15" model="b2b.item">
            <field name="sequence">15</field>
            <field name="active">True</field>
            <field name="name">delivery_note</field>
            <field name="model">b2b.item</field>
            <field name="description">Albarán de venta</field>
            <field name="code">
                b2b_fields_to_watch = (
                    'sale_id', 
                    'name', 
                    'date_done', 
                    'amount_total',
                    'state'
                )

                def b2b_is_notifiable(self, vals):
                    # Comprobamos si el cliente relaccionado es notificable
                    client_item = self.env['b2b.item'].search([('name', '=', 'customer')])
                    notifiable_client = client_item.must_notify(self.commercial_partner_id) if client_item else False
                    # Es un albarán y es de salida o dropshipping y el estado es done o cancel
                    return notifiable_client and (self.picking_type_id.code == 'outgoing' or self.picking_type_id.name == 'Dropship') and self.state in ('done', 'cancel')

                def b2b_get_data(self):
                    # Obtenemos el documento PDF como un string
                    docfile = self.env['report'].sudo().get_pdf([self.id], 'stock.report_deliveryslip')
                    # Todos los campos son fixed, ya que hasta que se valida no se notifica
                    # de forma que los campos que no se modifican al validar no se enviarían
                    return {
                        'fixed:customer_id': self.sale_id.partner_id.commercial_partner_id.id,
                        'fixed:name': self.name, 
                        'fixed:date': self.date_done, 
                        'fixed:total': self.amount_total, 
                        'fixed:pdf': base64.b64encode(docfile)
                    }
            </field>
        </record>

        <record id="b2b_item_16" model="b2b.item">
            <field name="sequence">16</field>
            <field name="active">True</field>
            <field name="name">sale_order</field>
            <field name="model">b2b.item</field>
            <field name="description">Pedido de venta</field>
            <field name="code">
                b2b_fields_to_watch = (
                    'partner_id', 
                    'name', 
                    'date_order', 
                    'amount_total',
                    'state'
                )

                def b2b_is_notifiable(self, vals):
                    # Comprobamos si el cliente relaccionado es notificable
                    client_item = self.env['b2b.item'].search([('name', '=', 'customer')])
                    notifiable_client = client_item.must_notify(self.commercial_partner_id) if client_item else False
                    # Es un pedido de venta y (se recibe date_order en vals y el estado es pending o lqdr) o el estado es cancel
                    return notifiable_client and (type(vals) is dict and vals.get('date_order') and self.state in ('pending', 'lqdr')) or self.state == 'cancel'

                def b2b_get_data(self):
                    # Obtenemos el documento PDF como un string
                    docfile = self.env['report'].sudo().get_pdf([self.id], 'sale.report_saleorder')
                    # Todos los campos son fixed, ya que hasta que se valida no se notifica
                    # de forma que los campos que no se modifican al validar no se enviarían
                    return {
                        'fixed:customer_id': self.partner_id.commercial_partner_id.id,
                        'fixed:name': self.name, 
                        'fixed:date': self.date_order, 
                        'fixed:total': self.amount_total, 
                        'fixed:pdf': base64.b64encode(docfile)
                    }
            </field>
        </record>
    </data>
</odoo>