<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="1">
        <record id="b2b_item_out_1" model="b2b.item.out">
            <field name="sequence">1</field>
            <field name="active">True</field>
            <field name="name">attribute</field>
            <field name="model">product.attribute</field>
            <field name="description">Atributos de producto</field>
            <field name="code">fields_to_watch = (
    'name', 
    'sequence',
    'is_color'
)

def is_notifiable(self, action, vals):
    return True

def get_data(self):
    return {
        'fixed:jim_id': self.id,
        'name': self.get_field_translations('name'),
        'is_color:type': 'color' if self.is_color else 'select',
        'sequence': self.sequence
    }</field>
        </record>

        <record id="b2b_item_out_2" model="b2b.item.out">
            <field name="sequence">2</field>
            <field name="active">True</field>
            <field name="name">attribute_value</field>
            <field name="model">product.attribute.value</field>
            <field name="description">Valores de atributos</field>
            <field name="code">fields_to_watch = (
    'name', 
    'sequence'
)

def is_notifiable(self, action, vals):
    # Valores que crean variantes
    return self.create_variant

def get_data(self):
    return {
        'fixed:jim_id': self.id,
        'attribute_id': self.attribute_id.id,
        'name': self.get_field_translations('name'),
        'sequence': self.sequence
    }</field>
        </record>

        <record id="b2b_item_out_3" model="b2b.item.out">
            <field name="sequence">3</field>
            <field name="active">True</field>
            <field name="name">brand</field>
            <field name="model">product.brand</field>
            <field name="description">Marcas de productos</field>
            <field name="code">fields_to_watch = (
    'name', 
    'description', 
    'image'
)

def is_notifiable(self, action, vals):
    return True

def get_data(self):
    return {
        'fixed:jim_id': self.id,
        'name': self.name,
        'description': self.get_field_translations('description'),
        'logo:image': b2b['images_base'] + self.public_file_name if self.public_file_name else None
    }</field>
        </record>

        <record id="b2b_item_out_4" model="b2b.item.out">
            <field name="sequence">4</field>
            <field name="active">True</field>
            <field name="name">category</field>
            <field name="model">product.tag</field>
            <field name="description">Categorías de producto</field>
            <field name="code">fields_to_watch = ('id', 'name', 'parent_id', 'public_file_name', 'sequence')

def is_notifiable(self, action, vals):
    # Está activa para la web (y la categoría padre también) y está activa
    return self.web and (not self.parent_id or (self.parent_id and self.parent_id.web)) and self.active

def get_data(self):
    return {
        'fixed:jim_id': self.id,
        'name': self.get_field_translations('name'),
        'parent_id': self.parent_id.id if self.parent_id else None,
        'image': b2b['images_base'] + self.public_file_name if self.public_file_name else None,
        'sequence': self.sequence
    }</field>
        </record>

        <record id="b2b_item_out_5" model="b2b.item.out">
            <field name="sequence">5</field>
            <field name="active">True</field>
            <field name="name">web_category</field>
            <field name="model">product.public.category</field>
            <field name="description">Categorías públicas de producto</field>
            <field name="code">fields_to_watch = None

def is_notifiable(self, action, vals):
    return True

def get_data(self):
    return {
        'fixed:jim_id': self.id,
        'name': self.get_field_translations('name'),
        'parent_id': self.parent_id.id if self.parent_id else None,
        'image': b2b['images_base'] + self.public_file_name if self.public_file_name else None,
        'sequence': self.sequence
    }</field>
        </record>

        <record id="b2b_item_out_6" model="b2b.item.out">
            <field name="sequence">6</field>
            <field name="active">True</field>
            <field name="name">product</field>
            <field name="model">product.template</field>
            <field name="description">Productos</field>
            <field name="code">fields_to_watch = (
    'name', 
    'barcode', 
    'description', 
    'product_brand_id', 
    'image', 
    'tag_ids', 
    'public_categ_ids', 
    'type', 
    'company_id',
    'website_published'
)

def is_notifiable(self, action, vals):
    return self.website_published

def get_data(self):
    return {
        'fixed:jim_id': self.id,
        'name': self.get_field_translations('name'),
        'default_code:reference': self.template_code or self.default_code,
        'barcode:ean13': self.barcode if self.barcode else None,
        'tag_ids:category_id': self.tag_ids.ids,
        'public_categ_ids:web_category_id': self.public_categ_ids.ids, 
        'brand_id': self.product_brand_id.id if self.product_brand_id else None,
        'description': self.get_field_translations('description'),
        'weight': self.weight,
        'image': b2b['images_base'] + self.public_file_name if self.public_file_name else None
    }

def pos_data(self, action):
    # Creamos las imágenes
    if action == 'create':
        for image in self.product_image_ids:
            image.b2b_record('create')
    # Borramos las imágenes
    # dejarán de estar accesibles antes de que 
    # llege el mensaje al suscriptor
    # elif action == 'delete':
    #    for image in self.product_image_ids:
    #        image.b2b_record('delete')</field>
        </record>

        <record id="b2b_item_out_7" model="b2b.item.out">
            <field name="sequence">7</field>
            <field name="active">True</field>
            <field name="name">product_variant</field>
            <field name="model">product.product</field>
            <field name="description">Variantes / Combinaciones</field>
            <field name="code">fields_to_watch = (
    'default_code',
    'name', 
    'barcode', 
    'product_tmpl_id', 
    'attribute_names', 
    'attribute_value_ids', 
    'weight',
    'default',
    'website_published'
)

def is_notifiable(self, action, vals):
    # La plantilla está publicada y tiene código y es almacenable y tiene etiquetas 
    # y tiene atributos (las variantes únicas no tienen atributos)
    return self.product_tmpl_id.website_published and self.default_code and self.product_tmpl_id.type == 'product' and self.attribute_names and self.website_published
    
def get_data(self):
    return {
        'fixed:jim_id': self.id,
        'fixed:product_id': self.product_tmpl_id.id,
        'default_code:reference': self.default_code,
        'attribute_value_ids:attribute_value': self.attribute_value_ids.ids,
        'barcode:ean13': self.barcode if self.barcode else None,
        'weight': self.weight,
        'default': False
    }</field>
        </record>

        <record id="b2b_item_out_8" model="b2b.item.out">
            <field name="sequence">8</field>
            <field name="active">True</field>
            <field name="name">product_parameterization</field>
            <field name="model">product.template.categorization, product.product.categorization</field>
            <field name="description">Parametrización de productos</field>
            <field name="code">fields_to_watch = None

def is_notifiable(self, action, vals):
    return vals and not vals.get('lang', False)
    
def model_parameterization(self):
    parameters = dict()
    # Get fields and data
    model_id = self.env['ir.model'].search([('model', '=', self._name)]).id
    for field in self.env['js_categorization.field'].search([('model_id', '=', model_id)]):
        field_value = getattr(self, field.name) or None
        if str(type(field_value)).lstrip(u"\u003C").startswith('class'):
            field_value = [val.name for val in field_value]
        parameters.update({ field.field_description:field_value })
    return parameters

def get_data(self):
    product_id = None
    variant_id = None
    product_par_model = 'product.template.categorization'
    variant_par_model = 'product.product.categorization'
    parameterization = dict()
    
    # Now updating product parameterization
    if self._name == product_par_model:
        product_id = self.product_id.id
        
        # Product parameterization
        parameterization.update(b2b['model_parameterization'](self))
        
        # Merge variant parameterization for products without variants
        if not self.product_id.product_variant_id.attribute_names:
            variant_parameterization = self.env[variant_par_model].search([('product_id', '=', self.product_id.product_variant_id.id)], limit=1)
            if variant_parameterization:
                parameterization.update(b2b['model_parameterization'](variant_parameterization))
                
    # Now updating variant parameterization
    elif self._name == variant_par_model:
        product_id = self.product_id.product_tmpl_id.id
        
        # Merge product parameterization for single variants
        if not self.product_id.attribute_names:
            product_parameterization = self.env[product_par_model].search([('product_id', '=', self.product_id.product_tmpl_id.id)], limit=1)
            if product_parameterization:
                parameterization.update(b2b['model_parameterization'](product_parameterization))
        else:
            variant_id = self.product_id.id
                
        # Variant parameterization
        parameterization.update(b2b['model_parameterization'](self))
    
    # Return data
    return {
        'fixed:jim_id': self.id,
        'fixed:product_id': product_id,
        'fixed:variant_id': variant_id,
        'fixed:parameters': parameterization
    } if parameterization else dict()</field>
        </record>

        <record id="b2b_item_out_9" model="b2b.item.out">
            <field name="sequence">9</field>
            <field name="active">True</field>
            <field name="name">product_image</field>
            <field name="model">product.image</field>
            <field name="description">Imágenes del producto</field>
            <field name="code">fields_to_watch = None

def is_notifiable(self, action, vals):
    return self.product_tmpl_id.website_published

def get_data(self):
    return {
        'fixed:jim_id': self.id,
        'fixed:product_id': self.product_tmpl_id.id, 
        'name': self.get_field_translations('name'), 
        'image': b2b['images_base'] + self.public_file_name if self.public_file_name else None, 
        'fixed:attributes': self.product_attributes_values.ids
    }</field>
        </record>

        <record id="b2b_item_out_10" model="b2b.item.out">
            <field name="sequence">10</field>
            <field name="active">True</field>
            <field name="name">currency</field>
            <field name="model">res.currency</field>
            <field name="description">Monedas</field>
            <field name="code">fields_to_watch = None

def is_notifiable(self, action, vals):
    return True

def get_data(self):
    return {
        'fixed:jim_id': self.id,
        'lname:name': self.lname or self.name,
        'code': self.name,
        'symbol': self.symbol,
        'rate': self.rate
    }</field>
        </record>

        <record id="b2b_item_out_11" model="b2b.item.out">
            <field name="sequence">11</field>
            <field name="active">True</field>
            <field name="name">pricelist</field>
            <field name="model">product.pricelist</field>
            <field name="description">Tarifas</field>
            <field name="code">fields_to_watch = ('name', 'currency_id')

def is_notifiable(self, action, vals):
    return True

def get_data(self):
    return {
        'fixed:jim_id': self.id,
        'fixed:name': self.name,
        'fixed:currency_id': self.currency_id.id
    }</field>
        </record>

        <record id="b2b_item_out_12" model="b2b.item.out">
            <field name="sequence">12</field>
            <field name="active">True</field>
            <field name="name">supply_plan</field>
            <field name="model">stock.move</field>
            <field name="description">Previsión de abastecimiento</field>
            <field name="code">fields_to_watch = (
    'order_id', 
    'product_id', 
    'product_qty', 
    'qty_received', 
    'date_expected', 
    'state'
)

def is_notifiable(self, action, vals):
    # El estado es (assigned, done o cancel) y la empresa es JIM SPORTS TECHNOLOGY y es un INT y hace referencia a una línea de compra y la fecha es superior a la actual
    return self.state in ('assigned', 'done', 'cancel') and self.company_id.id == 1 and self.picking_type_id.code == 'incoming' and self.purchase_line_id and datetime.strptime(self.date_expected, "%Y-%m-%d %H:%M:%S") >= datetime.now()

def get_data(self):
    return {
        'fixed:jim_id': self.id,
        'purchase_line_id:order_id': self.purchase_line_id.order_id.id,
        'product_id': self.product_id.product_tmpl_id.id if self.product_id else None,
        'variant_id': self.product_id.id if self.product_id.product_tmpl_id.product_variant_count > 1 else None,
        'quantity': self.product_uom_qty if self.state == 'assigned' else 0,
        'shipping_date': self.date_expected
    }</field>
        </record>

        <record id="b2b_item_out_13" model="b2b.item.out">
            <field name="sequence">13</field>
            <field name="active">True</field>
            <field name="name">customer</field>
            <field name="model">res.partner</field>
            <field name="description">Clientes</field>
            <field name="code">fields_to_watch = (
    'ref',
    'name', 
    'vat', 
    'email', 
    'type', 
    'parent_id', 
    'property_product_pricelist',
    'commercial_partner_id', 
    'group_companies_ids',
    'active'
)

def is_notifiable(self, action, vals):
    # Es un contacto y es empresa y tiene asignada por lo menos una empresa para la web y tiene correo electrónico y tiene contraseña web y es el contacto principal
    return self.active and self.is_company and self.group_companies_ids and self.customer and self.email and self.commercial_partner_id.id == self.id  and self.type == 'contact'
    
def get_primary_email(email):
    # Separadores válidos
    email_separators = (',', ';')
    # Si tiene un valor
    if email:
        for separator in email_separators:
            if separator in email:
                return email.split(separator)[0].strip()
    return email

def get_data(self):
    return {
        'fixed:jim_id': self.id,
        'name': self.name,
        'vat': self.vat or None,
        'email': b2b['get_primary_email'](self.email),
        'ref:reference': self.ref or None,
        'property_product_pricelist:pricelist_id': self.property_product_pricelist.id or None,
        'group_companies_ids:companies': [company.partner_id.id for company in self.group_companies_ids]
    }

def pos_data(self, action):
    # Creamos las direcciones
    if action == 'create':
        for child in self.child_ids:
            child.b2b_record('create')</field>
        </record>

        <record id="b2b_item_out_14" model="b2b.item.out">
            <field name="sequence">14</field>
            <field name="active">True</field>
            <field name="name">customer_address</field>
            <field name="model">res.partner</field>
            <field name="description">Direcciones de clientes</field>
            <field name="code">fields_to_watch = (
    'name', 
    'type', 
    'parent_id', 
    'street', 
    'street2', 
    'zip', 
    'city', 
    'state_id', 
    'country_id',
    'commercial_partner_id',
    'type', 
    'default', 
    'active',
)

def is_notifiable(self, action, vals):
    # Comprobamos si el cliente relaccionado es notificable
    customer_notifiable = self.commercial_partner_id.active and self.commercial_partner_id.group_companies_ids and self.commercial_partner_id.is_company and self.commercial_partner_id.customer and self.commercial_partner_id.email and self.commercial_partner_id.web_password and self.commercial_partner_id.id != self.id
    # Es de tipo 'invoice' o 'delivery' y no es una dirección de dropshipping
    return customer_notifiable and self.active and self.type in ('invoice', 'delivery') and self.name != 'DROPSHIPPING'

def get_data(self):
    return {
        'fixed:jim_id': self.id,
        'fixed:customer_id': self.parent_id.id, 
        'name': self.name if self.name else self.commercial_partner_id.name, 
        'street': self.street, 
        'street2': self.street2 or None, 
        'zip': self.zip, 
        'city': self.city, 
        'state_id:state': self.state_id.name if self.state_id else None, 
        'country_id:country': self.country_id.code if self.country_id else 'ES', 
        'type': self.type, 
        'default': self.default_partner_by_type
    }</field>
        </record>

        <record id="b2b_item_out_15" model="b2b.item.out">
            <field name="sequence">15</field>
            <field name="active">True</field>
            <field name="name">invoice</field>
            <field name="model">account.invoice</field>
            <field name="description">Factura de venta o abono</field>
            <field name="code">fields_to_watch = (
    'commercial_partner_id', 
    'number', 
    'date_invoice', 
    'amount_total',
    'state'
)

def is_notifiable(self, action, vals):
    # Es de tipo out_invoice o out_refund y tiene asignado un número y el estado es open o cancel
    return self.number and self.type in ('out_invoice', 'out_refund') and self.state in ('open', 'cancel')

def get_data(self):
    # Obtenemos el documento PDF como un string
    docfile = self.env['report'].sudo().get_pdf([self.id], 'account.report_invoice')
    # Obtenemos la moneda y posición
    currency = self.currency_id.symbol
    position = self.currency_id.position
    # Todos los campos son fixed, ya que hasta que se valida no se notifica
    # de forma que los campos que no se modifican al validar no se enviarían
    return {
        'fixed:jim_id': self.id,
        'fixed:customer_id': self.commercial_partner_id.id,
        'fixed:number': self.number, 
        'fixed:date': self.date_invoice, 
        'fixed:total': str(self.amount_total) + currency if position == 'after' else currency + str(self.amount_total), 
        'fixed:pdf': base64.b64encode(docfile)
    }</field>
        </record>

        <record id="b2b_item_out_16" model="b2b.item.out">
            <field name="sequence">16</field>
            <field name="active">True</field>
            <field name="name">delivery_note</field>
            <field name="model">stock.picking</field>
            <field name="description">Albarán de venta</field>
            <field name="code">fields_to_watch = (
    'sale_id', 
    'name', 
    'date_done', 
    'amount_total',
    'state'
)

def is_notifiable(self, action, vals):
    # Es un albarán y es de salida o dropshipping y el estado es done o cancel
    return (self.picking_type_id.code == 'outgoing' or self.picking_type_id.name == 'Dropship') and self.state in ('done', 'cancel')

def get_data(self):
    # Obtenemos el documento PDF como un string
    docfile = self.env['report'].sudo().get_pdf([self.id], 'stock.report_deliveryslip')
    # Obtenemos la moneda y posición
    currency = self.origin.pricelist_id.currency_id.symbol
    position = self.origin.pricelist_id.currency_id.position
    # Todos los campos son fixed, ya que hasta que se valida no se notifica
    # de forma que los campos que no se modifican al validar no se enviarían
    return {
        'fixed:jim_id': self.id,
        'fixed:customer_id': self.partner_id.commercial_partner_id.id,
        'fixed:name': self.name, 
        'fixed:date': self.date_done, 
        'fixed:total': str(self.amount_total) + currency if position == 'after' else currency + str(self.amount_total), 
        'fixed:pdf': base64.b64encode(docfile)
    }</field>
        </record>

        <record id="b2b_item_out_17" model="b2b.item.out">
            <field name="sequence">17</field>
            <field name="active">True</field>
            <field name="name">sale_order</field>
            <field name="model">sale.order</field>
            <field name="description">Pedido de venta</field>
            <field name="code">fields_to_watch = (
    'partner_id', 
    'name', 
    'date_order', 
    'amount_total',
    'state'
)

def is_notifiable(self, action, vals):
    # Es un pedido de venta y (se recibe date_order en vals y el estado es pending o lqdr) o el estado es cancel
    return (type(vals) is dict and vals.get('date_order') and self.state in ('pending', 'lqdr')) or self.state == 'cancel'

def get_data(self):
    # Obtenemos el documento PDF como un string
    docfile = self.env['report'].sudo().get_pdf([self.id], 'sale.report_saleorder')
    # Obtenemos la moneda y posición
    currency = self.pricelist_id.currency_id.symbol
    position = self.pricelist_id.currency_id.position
    # Todos los campos son fixed, ya que hasta que se valida no se notifica
    # de forma que los campos que no se modifican al validar no se enviarían
    return {
        'fixed:jim_id': self.id,
        'fixed:customer_id': self.partner_id.commercial_partner_id.id,
        'fixed:name': self.name, 
        'fixed:date': self.date_order, 
        'fixed:total': str(self.amount_total) + currency if position == 'after' else currency + str(self.amount_total), 
        'fixed:pdf': base64.b64encode(docfile)
    }</field>
        </record>

        <record id="b2b_item_out_18" model="b2b.item.out">
            <field name="sequence">18</field>
            <field name="active">True</field>
            <field name="name">customer_price</field>
            <field name="model">customer.price</field>
            <field name="description">Precios de clientes (actualizaciones)</field>
            <field name="code">fields_to_watch = None

def is_notifiable(self, action, vals):
    return self.product_id or self.product_tmpl_id

def get_data(self):
    # Llamamos al método que envía los precios pero lo limitamos a esta línea
    self.env['b2b.export'].b2b_customers_prices(lines_filter=[self.id,])
    return list()</field>
        </record>

        <record id="b2b_item_out_19" model="b2b.item.out">
            <field name="sequence">19</field>
            <field name="active">True</field>
            <field name="name">pricelist_item</field>
            <field name="model">product.pricelist.item</field>
            <field name="description">Precios de tarifas (actualizaciones)</field>
            <field name="code">fields_to_watch = None

def is_notifiable(self, action, vals):
    return self.product_id or self.product_tmpl_id

def get_data(self):
    template_obj = self.product_id.product_tmpl_id if self.product_id else self.product_tmpl_id
    # Llamamos al método que envía los precios pero lo limitamos a esta plantilla
    self.env['b2b.export'].b2b_pricelists_prices(templates_filter=[template_obj.id,])
    return list()</field>
        </record>
    </data>
</odoo>