<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="1">

        <record id="b2b_parameterization_value" model="b2b.item.out">
            <field name="sequence">30</field>
            <field name="active">True</field>
            <field name="exclude_on_sync">False</field>
            <field name="sync_updates">False</field>
            <field name="name">parameterization_value</field>
            <field name="model">js_parameterization.value</field>
            <field name="description">Campos de parametrización</field>
            <field name="code">fields_to_watch = ('name', 'fields')

def is_notifiable(self, action, vals):
    return bool(self.fields)

def related_to(self, action):
    return None
    
def get_data(self, action):
    return {
        'jim_id': self.id,
        'fields': list(map(int, self.fields)),
        'name': self.get_field_translations('name') 
    }</field>
        </record>

        <record id="b2b_product_parameterization" model="b2b.item.out">
            <field name="sequence">31</field>
            <field name="active">True</field>
            <field name="exclude_on_sync">True</field>
            <field name="sync_updates">False</field>
            <field name="name">product_parameterization</field>
            <field name="model">product.parameterization</field>
            <field name="description">Parametrización de productos</field>
            <field name="code">fields_to_watch = None

def is_notifiable(self, action, vals):
    return (self.product_tmpl_id and self.product_tmpl_id.website_published and not self.is_empty())

def related_to(self, action):
    return 'product.template,%s' % self.product_tmpl_id.id

def get_data(self, action):
    return {
        'jim_id': self.id,
        'fixed:product_id': self.product_tmpl_id.id,
        'parameters': self.template_fields_dict()
    }</field>
        </record>

    </data>
</odoo>